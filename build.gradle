plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.12.2'
}

// apply dependency file for a simple version management strategy.
apply from: "$projectDir/gradle/dependencies.gradle"

// get the system env var for version during release tagging in GitHub
// or default to a static string.
version = System.getenv("VERSION") ?: '1.0.5-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/DovahkiinForged/dovahkiin-forged-assets")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
    mavenLocal()
}

dependencies {
    runtimeOnly libs.assets
    testRuntimeOnly libs.assets
    // JUint
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/DovahkiinForged/${rootProject.name}"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

/**
 * This task is used to copy textures, lang files, and other resources from the assets library.
 */
tasks.register('copyAssetResources', Copy) {
    def dependencyJar = configurations.runtimeClasspath.find {
        it.name.contains('dovahkiin-forged-assets')
    }

    if (dependencyJar) {
        println "Jar found: $dependencyJar.name"
        from zipTree(dependencyJar)

        // Include the assets folder from the assets and commons dependencies
        include 'assets/**'

        // Copy to into the build resources directory
        into layout.buildDirectory.dir("resources/main").get().asFile
    } else {
        println "Assets jar not found."
    }
}

// telling the build process that the project relies on this task.
tasks.named('processResources') {
    dependsOn tasks.named('copyAssetResources')
}
